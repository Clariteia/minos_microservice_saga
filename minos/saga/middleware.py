from collections.abc import (
    Awaitable,
    Callable,
)
from typing import (
    Optional,
)
from uuid import (
    UUID,
)

from minos.aggregate import (
    TransactionEntry,
)
from minos.networks import (
    BrokerRequest,
    Request,
    Response,
)


async def transactional_command(
    request: Request, inner: Callable[[Request], Awaitable[Optional[Response]]]
) -> Optional[Response]:
    """Execute the command transactionally if it comes from a saga.

    :param request: The request containing the data.
    :param inner: The inner handling function to be executed.
    :return: The response generated by the inner handling function.
    """
    if isinstance(request, BrokerRequest) and request.raw.saga is not None:
        return await _transaction(request, inner, [step["identifier"] for step in request.raw.trace])

    return await inner(request)


async def _transaction(
    request: Request, inner: Callable[[Request], Awaitable[Optional[Response]]], transaction_uuids: list[UUID]
) -> Optional[Response]:
    if len(transaction_uuids):
        async with TransactionEntry(uuid=transaction_uuids[0], autocommit=False):
            return await _transaction(request, inner, transaction_uuids[1:])

    return await inner(request)
